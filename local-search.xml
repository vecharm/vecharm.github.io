<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>dex文件结构分析</title>
    <link href="/2021/02/23/apk%E5%8C%85%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <url>/2021/02/23/apk%E5%8C%85%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>文件结构展示</p><p><img src="https://static.oschina.net/uploads/img/202006/15184712_pRNn.jpg" srcset="/img/loading.gif" alt=""></p><p>DEX文件格式</p><p><img src="https://static.oschina.net/uploads/img/202006/15184713_0Qgo.jpg" srcset="/img/loading.gif" alt=""></p><p>DEX文件在010中的表现</p><p>文件结构详解</p><p><img src="https://static.oschina.net/uploads/img/202006/15184713_70RF.jpg" srcset="/img/loading.gif" alt=""></p><p>结构体定义</p><p>文件头( dex_header )。</p><ul><li><p>magic[8]：dex版本标识。这类字节必须出现在 .dex 文件的开头，以便系统将其原样识别。该值会特意包含一个换行符(“\n” 或 0x0a)和空字节(“\0” 或 0x00)，以便协助检测某些形式的损坏问题。该值还可以将格式版本号编码为 3 个十进制数字;随着格式的演变，预计该值会单调递增。</p></li><li><p>checksum：可以用于文件剩余内容(除 magic 和此字段之外的所有内容)的 adler32 校验和。另外，还可以用于检测文件损坏情况。</p></li><li><p>signature[kSha1DigestSize]：文件剩余内容(除 magic、checksum 和此字段之外的所有内容)的 SHA-1 签名(哈希);用于对文件进行唯一标识。</p></li><li><p>file_size：整个文件(包括标头)的大小，以字节为单位。</p></li><li><p>header_size：标头(整个区段)的大小，以字节为单位。这一项允许至少一定程度的向后/向前兼容性，而不必让格式失效。</p></li><li><p>endian_tag：字节序标记。ENDIAN_CONSTANT ，表示小端字节序。</p></li><li><p>REVERSE_ENDIAN_CONSTANT 表示大端字节序，默认值为</p></li><li><p>ENDIAN_CONSTANT 。</p></li><li><p><code>link_size</code> 与 <code>link_off</code> ：链接区段的大小与文件偏移。如果此文件未进行静态链接，则两个值都为0。</p></li><li><p><code>map_off</code>：从文件开头到映射项列表的文件偏移量。</p></li><li><p><code>string_ids_size</code> 与 <code>string_ids_off</code>：字符串标识符列表中的字符串数量与文件偏移。</p></li><li><p><code>type_ids_size</code> 与 <code>type_ids_off</code>：类型标识符列表中的元素数量及文件偏移。元素数量上限为65535。</p></li><li><p><code>proto_ids_size</code> 与 <code>proto_ids_off</code>：原型标识符列表中的元素数量及文件偏移。元素数量上限为65535。</p></li><li><p><code>field_ids_size</code> 与 field_ids_off：字段标识符列表中的元素数量及文件偏移。</p></li><li><p><code>method_ids_size</code> 与 method_ids_off：方法标识符列表中的元素数量及文件偏移。</p></li><li><p><code>class_defs_size</code> 与 <code>class_defs_off</code>：类定义列表中的元素数量及文件偏移。</p></li><li><p><code>data_size</code> 与 <code>data_off</code> ：data区段的大小及文件偏移。</p></li></ul><p>字符串标识符列表( dex_string_ids )在DEX文件以 DexStringId[] 的形式存在，其结构如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DexStringId</span>&#123;</span><br>    u4 stringDataoff; <span class="hljs-comment">//字符串数据的文件偏移</span><br>&#125;<br></code></pre></td></tr></table></figure><p>类型标识符列表( dex_type_ids )在DEX文件以 DexTypeId[] 的形式存在，其结构如下。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184713_F5ew.jpg" srcset="/img/loading.gif" alt=""></p><p>方法原型标识符列表( dex_proto_ids )在DEX文件以 DexProtoId[] 的形式存在，其中 DexProtoId 结构如下。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184713_cnGo.jpg" srcset="/img/loading.gif" alt=""></p><p>DexTypeList 结构如下。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184714_55DY.jpg" srcset="/img/loading.gif" alt=""></p><p>字段标识符列表( dex_field_ids )在DEX文件以 DexFieldId[] 的形式存在，其中 DexFieldId 结构如下。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184714_RN7O.jpg" srcset="/img/loading.gif" alt=""></p><p>方法标识符列表( dex_method_ids ) 在DEX文件以 DexMethodId[] 的形式存在，其中 DexMethodId 结构如下。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184714_nG8Z.jpg" srcset="/img/loading.gif" alt=""></p><p>类定义列列表( dex_class_defs )在DEX文件以 DexClassDef[] 的形式存在，其中 DexClassDef 结构如下。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184714_IE9A.jpg" srcset="/img/loading.gif" alt=""></p><p>映射项列表( dex_map_list ) 在DEX文件以 DexMapItem[] 的形式存在，其中 DexMapItem 结构如下。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184714_5Cdf.jpg" srcset="/img/loading.gif" alt=""></p><p>类型代码表如图所示。</p><p><img src="https://static.oschina.net/uploads/img/202006/15184715_stmj.jpg" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android各版本适配（基于6.0 ～ 9.0）</title>
    <link href="/2021/02/22/Android%E5%90%84%E7%89%88%E6%9C%AC%E9%80%82%E9%85%8D%EF%BC%88%E5%9F%BA%E4%BA%8E6.0%20%EF%BD%9E%209.0%EF%BC%89/"/>
    <url>/2021/02/22/Android%E5%90%84%E7%89%88%E6%9C%AC%E9%80%82%E9%85%8D%EF%BC%88%E5%9F%BA%E4%BA%8E6.0%20%EF%BD%9E%209.0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>Android各版本适配（基于6.0 ～ 9.0）</strong></p><ol><li><p><strong>Android 6.0 适配</strong></p><p>在 Android 6.0 ~ Android 8.0，不需要一个一个申请危险权限。如果应用在运行时请求权限并且被授予该权限，系统会错误地将属于同一权限组并且在清单中注册的其他权限也一起授予应用，即对于同一组内的权限，只要有一个被同意，其他的都会被同意。</p><p>在 Android 8.0 之后，此行为已被纠正。系统只会授予应用明确请求的权限。然而一旦用户为应用授予某个权限，则所有后续对该权限组中权限的请求都将被自动批准，但是若没有请求相应的权限而进行操作的话就会出现应用 crash 的情况。</p><p>危险权限分组说明</p></li></ol><table><thead><tr><th>权限组</th><th>权限名称</th></tr></thead><tbody><tr><td>CALENDAR</td><td>android.permission.READ_CALENDAR</td></tr><tr><td></td><td>android.permission.WRITE_CALENDAR</td></tr><tr><td>CAMERA</td><td>android.permission.CAMERA</td></tr><tr><td>CONTACTS</td><td>android.permission.READ_CONTACTS</td></tr><tr><td></td><td>android.permission.WRITE_CONTACTS</td></tr><tr><td></td><td>android.permission.GET_ACCOUNTS</td></tr><tr><td>LOCATION</td><td>android.permission.ACCESS_FINE_LOCATION</td></tr><tr><td></td><td>android.permission.ACCESS_COARSE_LOCATION</td></tr><tr><td>MICROPHONE</td><td>android.permission.RECORD_AUDIO</td></tr><tr><td>PHONE</td><td>android.permission.READ_PHONE_STATE</td></tr><tr><td></td><td>android.permission.CALL_PHONE</td></tr><tr><td></td><td>android.permission.READ_CALL_LOG</td></tr><tr><td></td><td>android.permission.READ_CALL_LOG</td></tr><tr><td></td><td>android.permission.ADD_VOICEMAIL</td></tr><tr><td></td><td>android.permission.WRITE_CALL_LOG</td></tr><tr><td></td><td>android.permission.USE_SIP</td></tr><tr><td></td><td>android.permission.PROCESS_OUTGOING_CALLS</td></tr><tr><td></td><td></td></tr><tr><td>SENSORS</td><td>android.permission.BODY_SENSORS</td></tr><tr><td>SMS</td><td>android.permission.SEND_SMS</td></tr><tr><td></td><td>android.permission.RECEIVE_SMS</td></tr><tr><td></td><td>android.permission.READ_SMS</td></tr><tr><td></td><td>android.permission.RECEIVE_WAP_PUSH</td></tr><tr><td></td><td>android.permission.RECEIVE_MMS</td></tr><tr><td>STORAGE</td><td>android.permission.READ_EXTERNAL_STORAGE</td></tr><tr><td></td><td>android.permission.WRITE_EXTERNAL_STORAGE</td></tr></tbody></table><ol><li><p><strong>Android 7.0 适配</strong></p><p><strong>应用间共享文件</strong><br>在 targetSdkVersion &gt;= 24 的app中，将严格执行 StrictMode 模式，也就是说，将对安全做更严格的校验。而从 Android N 开始，将不允许在 App 间，使用 file:// 的方式，传递一个 File ，否者会抛出 <code>FileUriExposedException</code>的错误，会直接引发 Crash。  </p><pre><code>但是，既然官方对文件的分享做了一个这么强硬的修改（直接抛出异常），实际上也提供了解决方案，那就是 `FileProvider`，通过 `content://`的模式替换掉 `file://`，同时，需要开发者主动升级 targetSdkVersion 到 24 才会执行此策略。  FileProvider是android support v4包提供的，是ContentProvider的子类，便于将自己app的数据提供给其他app访问。  在app开发过程中需要用到FileProvider的主要有</code></pre><ol><li><p>相机拍照以及图片裁剪</p></li><li><p>调用系统应用安装器安装apk（应用升级）<br>具体使用的方法<br>1、配置AndroidManifest文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.support.v4.content.FileProvider"</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">"$&#123;applicationId&#125;.provider"</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">"false"</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:grantUriPermissions</span>=<span class="hljs-string">"true"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.support.FILE_PROVIDER_PATHS"</span></span><br><span class="hljs-tag">              <span class="hljs-attr">android:resource</span>=<span class="hljs-string">"@xml/provider_paths"</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">provider</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>authorities</code>：一个标识，在当前系统内必须是唯一值，一般用包名。<br><code>exported</code>：表示该 FileProvider 是否需要公开出去。<br><code>granUriPermissions</code>：是否允许授权文件的临时访问权限。这里需要，所以是 true。</p><p>2、在res的建xml目录，放入<code>provider_paths.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">paths</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">external-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"external_storage_root"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">"."</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">files-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"files-path"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">"."</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"cache-path"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">"."</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--/storage/emulated/0/Android/data/...--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">external-files-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"external_file_path"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">"."</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--代表app 外部存储区域根目录下的文件 Context.getExternalCacheDir目录下的目录--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">external-cache-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"external_cache_path"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">"."</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--配置root-path。这样子可以读取到sd卡和一些应用分身的目录，否则微信分身保存的图片，就会导致 java.lang.IllegalArgumentException: Failed to find configured root that contains /storage/emulated/999/tencent/MicroMsg/WeiXin/export1544062754693.jpg，在小米6的手机上微信分身有这个crash，华为没有</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root-path</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">"root-path"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">path</span>=<span class="hljs-string">""</span> /&gt;</span><br>/paths&gt;<br></code></pre></td></tr></table></figure></li></ol><p><code>root-path</code> 对应<code>DEVICE_ROOT</code>,也就是<code>File DEVICE_ROOT = new File(&quot;/&quot;)</code>，即根目录，一般不需要配置。<br><code>files-path</code>对应 content.getFileDir() 获取到的目录。<br><code>cache-path</code>对应 content.getCacheDir() 获取到的目录<br><code>external-path</code>对应 Environment.getExternalStorageDirectory() 指向的目录。<br><code>external-files-path</code>对应 ContextCompat.getExternalFilesDirs() 获取到的目录。<br><code>external-cache-path</code>对应 ContextCompat.getExternalCacheDirs() 获取到的目录。</p></li></ol><table><thead><tr><th>TAG</th><th>Value</th><th>Path</th></tr></thead><tbody><tr><td>TAG_ROOT_PATH</td><td>root-path</td><td>/</td></tr><tr><td>TAG_FILES_PATH</td><td>files-path</td><td>/data/data/&lt;包名&gt;/files</td></tr><tr><td>TAG_CACHE_PATH</td><td>cache-path</td><td>/data/data/&lt;包名&gt;/cache</td></tr><tr><td>TAG_EXTERNAL</td><td>external-path</td><td>/storage/emulate/0</td></tr><tr><td>TAG_EXTERNAL_FILES</td><td>external-files-path</td><td>/storage/emulate/0/Android/data/&lt;包名&gt;/files</td></tr><tr><td>TAG_EXTERNAL_CACHE</td><td>external-cache-path</td><td>/storage/emulate/0/Android/data/&lt;包名&gt;/cache</td></tr></tbody></table><p>   注意点<br>           经过大量用户使用，后期反馈，在小米6，开启微信分身之后，分身微信保存的图片，使用FileProvider将一张图片的path转成Uri的过程中crash了。这张图片路径如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/999/</span>tencent<span class="hljs-regexp">/MicroMsg/</span>WeiXin<span class="hljs-regexp">/mmexport1544062754693.jpg</span><br></code></pre></td></tr></table></figure><p>   你一定觉得很奇怪，正常路径是<code>/storage/emulate/0</code>，怎么会有<code>/storage/emulate/999</code>的路径，查找原因是应用分身导致的。之后会抛</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">java.lang.IllegalArgumentException: Failed to <span class="hljs-keyword">find</span> configured root that contains <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/999/</span>tencent<span class="hljs-regexp">/MicroMsg/</span>WeiXin<span class="hljs-regexp">/mmexport1544062754693.jpg</span><br></code></pre></td></tr></table></figure><p>   那个时候，我的代码的xml的path里面是没有配置<code>root-path</code>节点的。debug时，fileProvide的mRoots是5个元素<br>   <img src="https://img-blog.csdnimg.cn/20181207134943228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d4ejExNzk1MDM0MjI=,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><p>   后面我添加了<code>root-path</code>节点之后，mRoots变成了6个<br>   <img src="https://img-blog.csdnimg.cn/20181207135234566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d4ejExNzk1MDM0MjI=,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>   之后就完美实现了将path转成Uri。<br>           部分手机可以插外置sdcard，比如红米手机，之后就导致找不到sdcard的root，这时候也是需要配置<code>root-path</code>。<br>           下面在聊一聊Android的文件系统<br>   外部存储的公共目录<br>   <code>DIRECTORY_MUSIC</code>：音乐类型 <code>/storage/emulate/0/music</code><br>   <code>DIRECTORY_PICTURES</code>：图片类型<br>   <code>DIRECTORY_MOVIES</code>：电影类型<br>   <code>DIRECTORY_DCIM</code>：照片类型,相机拍摄的照片视频都在这个目录（digital camera in memory） <code>/storage/emulate/0/DCIM</code><br>   <code>DIRECTORY_DOWNLOADS</code>：下载文件类型 <code>/storage/emulate/0/downloads</code><br>   <code>DIRECTORY_DOCUMENTS</code>：文档类型<br>   <code>DIRECTORY_RINGTONES</code>：铃声类型<br>   <code>DIRECTORY_ALARMS</code>：闹钟提示音类型<br>   <code>DIRECTORY_NOTIFICATIONS</code>：通知提示音类型<br>   <code>DIRECTORY_PODCASTS</code>：播客音频类型</p><p>   这些可以通过Environment的getExternalStoragePublicDirectory()来获取</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">File</span> <span class="hljs-title">getExternalStoragePublicDirectory</span><span class="hljs-params">(<span class="hljs-keyword">String</span> type)</span></span>;<br></code></pre></td></tr></table></figure><p>   <strong>APK signature scheme v2</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Android </span><span class="hljs-number">7</span>.<span class="hljs-number">0</span> 引入一项新的应用签名方案 APK Signature Scheme <span class="hljs-built_in">v2</span>，它能提供更快的应用安装时间和<br>更多针对未授权 APK 文件更改的保护。在默认情况下，<span class="hljs-keyword">Android </span>Studio <span class="hljs-number">2</span>.<span class="hljs-number">2</span> 和 <span class="hljs-keyword">Android </span>Plugin for <br><span class="hljs-symbol">Gradle</span> <span class="hljs-number">2</span>.<span class="hljs-number">2</span> 会使用 APK Signature Scheme <span class="hljs-built_in">v2</span> 和传统签名方案来签署您的应用。<br></code></pre></td></tr></table></figure><p>   说明：</p><p>   <img src="https://upload-images.jianshu.io/upload_images/7912789-da6e85a74c243749.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" srcset="/img/loading.gif" alt="签名打包"></p><ol><li><p>只勾选V1签名就是传统方案签署，但是在 Android 7.0 上不会使用V2安全的验证方式。</p></li><li><p>只勾选V2签名7.0以下会显示未安装，Android 7.0 上则会使用了V2安全的验证方式。</p></li><li><p>同时勾选V1和V2则所有版本都没问题。</p><p><strong>org.apache不支持问题</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// build.gradle里面加上这句话</span><br>defaultConfig &#123;<br>    useLibrary <span class="hljs-string">'org.apache.http.legacy'</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SharedPreferences闪退</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// MODE_WORLD_READABLE：Android 7.0以后不能使用这个获取，会闪退</span><br><span class="hljs-comment">// 应修改成MODE_PRIVATE</span><br>SharedPreferences read = getSharedPreferences(RELEASE_POOL_DATA, MODE_WORLD_READABLE);<br></code></pre></td></tr></table></figure></li><li><p><strong>Android 8.0 适配</strong></p><p><strong>Android 8.0中PHONE权限组新增两个权限</strong></p><blockquote><p>ANSWER_PHONE_CALLS：允许您的应用通过编程方式接听呼入电话。要在您的应用中处理呼入电话，您可以使用<br>acceptRingingCall() 函数。 READ_PHONE_NUMBERS：权限允许您的应用读取设备中存储的电话号码。</p></blockquote><p><strong>通知适配</strong></p><p>Android 8.0中，为了更好的管制通知的提醒，不想一些不重要的通知打扰用户，新增了通知渠道，用户可以根据渠道来屏蔽一些不想要的通知。<br>代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description: Android 8.0通知的兼容类</span><br><span class="hljs-comment"> * Author: Jack Zhang</span><br><span class="hljs-comment"> * create on: 2019/1/2 3:16 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyNotification</span></span><br><span class="hljs-class"></span>&#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHANNEL_ID_GL = <span class="hljs-string">"com.jz.gailun"</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHANNEL_NAME_GL = <span class="hljs-string">"盖伦"</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHANNEL_ID_AX = <span class="hljs-string">"com.jz.aixi"</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHANNEL_NAME_AX = <span class="hljs-string">"艾希"</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHANNEL_ID_LL = <span class="hljs-string">"com.jz.liulang"</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CHANNEL_NAME_LL = <span class="hljs-string">"流浪"</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setONotifyChannel</span><span class="hljs-params">(NotificationManager manager, String channeId, String channelName)</span></span><br><span class="hljs-function">  </span>&#123;<br>    setONotifyChannel(manager, <span class="hljs-keyword">null</span>, channeId, channelName);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setONotifyChannel</span><span class="hljs-params">(NotificationManager manager, NotificationCompat.Builder builder, String channeId, String channelName)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (TextUtils.isEmpty(channeId) || TextUtils.isEmpty(channelName))<br>      Logger.e(<span class="hljs-string">"Android 8.0 Notification的channeId与channelName不能为空"</span>);<br><br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">26</span>)<br>    &#123;<br>      <span class="hljs-comment">// 第三个参数设置通知的优先级别</span><br>      NotificationChannel channel = <span class="hljs-keyword">new</span> NotificationChannel(channeId, channelName, NotificationManager.IMPORTANCE_DEFAULT);<br>      <span class="hljs-comment">// 是否可以绕过请勿打扰模式</span><br>      channel.canBypassDnd();<br>      <span class="hljs-comment">// 是否可以显示icon角标</span><br>      channel.canShowBadge();<br>      <span class="hljs-comment">// 是否显示通知闪灯</span><br>      channel.enableLights(<span class="hljs-keyword">true</span>);<br>      <span class="hljs-comment">// 收到消息时震动提示</span><br>      channel.enableVibration(<span class="hljs-keyword">true</span>);<br>      <span class="hljs-comment">// 设置绕过免打扰</span><br>      channel.setBypassDnd(<span class="hljs-keyword">true</span>);<br>      channel.setLockscreenVisibility(NotificationCompat.VISIBILITY_SECRET);<br>      <span class="hljs-comment">// 设置闪光灯颜色</span><br>      channel.setLightColor(Color.RED);<br>      <span class="hljs-comment">// 获取设置铃声设置</span><br>      channel.getAudioAttributes();<br>      <span class="hljs-comment">// 设置震动模式</span><br>      channel.setVibrationPattern(<span class="hljs-keyword">new</span> <span class="hljs-keyword">long</span>[]&#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>&#125;);<br>      <span class="hljs-comment">// 是否会闪光</span><br>      channel.shouldShowLights();<br>      <span class="hljs-keyword">if</span> (manager != <span class="hljs-keyword">null</span>)<br>        manager.createNotificationChannel(channel);<br>      <span class="hljs-keyword">if</span> (builder != <span class="hljs-keyword">null</span>)<br>        builder.setChannelId(channeId);<span class="hljs-comment">//这个id参数要与上面channel构建的第一个参数对应</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Notification <span class="hljs-title">getNotification</span><span class="hljs-params">(Context context, String channelId)</span></span><br><span class="hljs-function">  </span>&#123;<br>    NotificationCompat.Builder notificationBuilder = <span class="hljs-keyword">new</span> NotificationCompat.Builder(context, channelId);<br>    Notification notification = notificationBuilder.setOngoing(<span class="hljs-keyword">true</span>)<br>            .setSmallIcon(R.mipmap.ic_logo)<br>            .setPriority(NotificationManager.IMPORTANCE_MIN)<br>            .setCategory(Notification.CATEGORY_SERVICE)<br>            .build();<br>    <span class="hljs-keyword">return</span> notification;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description: 通知管理类</span><br><span class="hljs-comment"> * Author: Jack Zhang</span><br><span class="hljs-comment"> * create on: 2019/1/2 3:23 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotifyManager</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> NotifyManager INSTANCE;<br><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">NotifyManager</span><span class="hljs-params">(Context context)</span></span><br><span class="hljs-function">  </span>&#123;<br>    initNotifyManager(context);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> NotifyManager <span class="hljs-title">getInstance</span><span class="hljs-params">(Context context)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)<br>      <span class="hljs-keyword">synchronized</span> (NotifyManager<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><br><span class="hljs-class">      </span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)<br>          INSTANCE = <span class="hljs-keyword">new</span> NotifyManager(context);<br>      &#125;<br>    <span class="hljs-keyword">return</span> INSTANCE;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> NotificationManager manager;<br>  <span class="hljs-comment">// NotificationManagerCompat</span><br>  <span class="hljs-keyword">private</span> NotificationCompat.Builder builder;<br><br>  <span class="hljs-comment">// 初始化通知栏配置</span><br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initNotifyManager</span><span class="hljs-params">(Context context)</span></span><br><span class="hljs-function">  </span>&#123;<br>    context = context.getApplicationContext();<br>    manager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);<br><span class="hljs-comment">//    // 如果存在则清除上一个消息</span><br><span class="hljs-comment">//    manager.cancel(lastNotificationId);</span><br>    builder = <span class="hljs-keyword">new</span> NotificationCompat.Builder(context, MyNotification.CHANNEL_ID_GL);<br><br>    MyNotification.setONotifyChannel(manager, builder, MyNotification.CHANNEL_ID_GL, MyNotification.CHANNEL_NAME_GL);<br><br>    <span class="hljs-comment">// 设置标题</span><br>    builder.setContentTitle(<span class="hljs-string">"Title"</span>);<br>    <span class="hljs-comment">// 状态栏的动画提醒语句</span><br>    builder.setTicker(<span class="hljs-string">"Ticker"</span>);<br>    <span class="hljs-comment">// 什么时候提醒</span><br>    builder.setWhen(System.currentTimeMillis());<br>    <span class="hljs-comment">// 设置通知栏的优先级</span><br>    builder.setPriority(Notification.PRIORITY_DEFAULT);<br>    <span class="hljs-comment">// 设置点击可消失</span><br>    builder.setAutoCancel(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-comment">// 设置是否震动等</span><br>    builder.setDefaults(Notification.DEFAULT_VIBRATE);<br>    <span class="hljs-comment">// 设置icon</span><br>    builder.setSmallIcon(R.mipmap.ic_logo);<br>    <span class="hljs-comment">// 设置点击意图</span><br>    Intent intent = <span class="hljs-keyword">new</span> Intent(context, MainActivity<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>    PendingIntent pendingIntent = PendingIntent.getActivity(context, <span class="hljs-number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);<br>    builder.setContentIntent(pendingIntent);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 显示盖伦通知栏</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@author</span> Jack Zhang</span><br><span class="hljs-comment">   * create at 2019/1/2 3:28 PM</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGLNotify</span><span class="hljs-params">(Context context)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-comment">// 设置内容</span><br>    builder.setContentText(<span class="hljs-string">"盖伦"</span>);<br>    manager.notify(<span class="hljs-number">1</span>, builder.build());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 显示艾希通知栏</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@author</span> Jack Zhang</span><br><span class="hljs-comment">   * create at 2019/1/2 3:28 PM</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAXNotify</span><span class="hljs-params">(Context context)</span></span><br><span class="hljs-function">  </span>&#123;<br>    builder.setContentText(<span class="hljs-string">"艾希"</span>);<br>    manager.notify(<span class="hljs-number">2</span>, builder.build());<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 显示流浪通知栏</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@author</span> Jack Zhang</span><br><span class="hljs-comment">   * create at 2019/1/2 3:28 PM</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showLLNotify</span><span class="hljs-params">(Context context)</span></span><br><span class="hljs-function">  </span>&#123;<br>    builder.setContentText(<span class="hljs-string">"流浪"</span>);<br>    manager.notify(<span class="hljs-number">3</span>, builder.build());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SecurityException的闪退</strong></p><p>问题原因：项目使用了ActiveAndroid，在 8.0 或 8.1 系统上使用 26 或以上的版本的 SDK 时，调用 ContentResolver 的 notifyChange 方法通知数据更新，或者调用 ContentResolver 的 registerContentObserver 方法监听数据变化时，会出现上述异常。</p><p><strong>解决方案：</strong><br>在清单文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:name</span>=<span class="hljs-string">"com.activeandroid.content.ContentProvider"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">"com.jz.androidclient"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">"true"</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:exported</span>=<span class="hljs-string">"false"</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>去掉这个监听刷新的方法，改为广播刷新</p><p><strong>静态广播无法正常接收</strong></p><blockquote><p>问题原因：Android 8.0 引入了新的广播接收器限制，因此您应该移除所有为隐式广播 Intent 注册的广播接收器。<br>解决方案：使用动态广播代替静态广播。</p></blockquote><p><strong>Only fullscreen opaque activities can request orientation</strong></p><blockquote><p>Caused by: java.lang.IllegalStateException: Only fullscreen opaque<br>activities can request orientation</p></blockquote><p>问题原因：Android 8.0 非全屏透明页面不允许设置方向（后面8.1系统谷歌就去掉了这个限制，可能是真的没必要）</p><p><strong>解决方案：</strong></p><ol><li>android:windowIsTranslucent设置为false。</li><li>如果还是想用的话，就去掉清单文件中Activity中的android:screenOrientation=“portrait”。</li><li>使用透明的dialog或者PopupWindow来代替，也可以用DialogFragment，看自己的需求和喜好。</li></ol></li><li><p><strong>Android 9.0 适配</strong></p><p><strong>CLEARTEXT communication to <a href="http://life.115.com/" target="_blank" rel="noopener">life.115.com</a> not permitted by network security policy</strong></p><blockquote><p>CLEARTEXT communication to <a href="http://life.115.com/" target="_blank" rel="noopener">life.115.com</a> not permitted by network<br>security polic</p></blockquote><p>问题原因： Android P 限制了明文流量的网络请求，非加密的流量请求都会被系统禁止掉</p><p>解决方案：</p><p>在资源文件新建xml目录，新建文件network_security_config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">network-security-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base-config</span> <span class="hljs-attr">cleartextTrafficPermitted</span>=<span class="hljs-string">"true"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">network-security-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>清单文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:networkSecurityConfig</span>=<span class="hljs-string">"@xml/network_security_config"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Android 9.0加的--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uses-library</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">"org.apache.http.legacy"</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:required</span>=<span class="hljs-string">"false"</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>其他Api的修改</strong></p><blockquote><p>java.lang.IllegalArgumentException: Invalid Region.Op - only INTERSECT<br>and DIFFERENCE are allowed</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">26</span>) <br>  canvas.clipPath(mPath); <br><span class="hljs-keyword">else</span><br>  canvas.clipPath(mPath, Region.Op.REPLACE);<br></code></pre></td></tr></table></figure></li></ol><p>转载<br><a href="https://blog.csdn.net/wxz1179503422/article/details/84874171" target="_blank" rel="noopener">https://blog.csdn.net/wxz1179503422/article/details/84874171</a><br><a href="https://blog.csdn.net/weixin_41729259/article/details/89368713?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-17.control&amp;dist_request_id=ebfab3d9-0b16-4f74-9fed-c5c0c8ca2ac5&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-17.control" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41729259/article/details/89368713?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-17.control&amp;dist_request_id=ebfab3d9-0b16-4f74-9fed-c5c0c8ca2ac5&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-17.control</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/05/22/hello-world/"/>
    <url>/2020/05/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
